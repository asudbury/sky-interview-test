{"version":3,"sources":["data/index.js","reduxApi.ts","store.ts","components/messageItem.tsx","components/messages.tsx","App.tsx","index.tsx"],"names":["randomDelayPromise","data","delay","Math","floor","random","Promise","resolve","setTimeout","reduxApi","createApi","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","fetchMembers","query","queryFn","arg","queryApi","extraOptions","require","then","response","fetchMessages","sort","a","b","Date","timestamp","getTime","useFetchMembersQuery","useFetchMessagesQuery","store","configureStore","reducer","reducerPath","middleware","getDefaultMiddleware","concat","MessageItem","message","member","useState","emailDisplay","setEmailDisplay","Tooltip","title","email","open","ListItem","alignItems","onMouseEnter","onMouseLeave","ListItemAvatar","Avatar","alt","src","avatar","ListItemText","primary","secondary","Fragment","firstName","lastName","dayjs","format","Divider","variant","component","id","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","inline","display","Messages","classes","memberData","List","className","map","memberId","userId","find","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"i98BAEA,SAASA,EAAmBC,GAC1B,IAAMC,EAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAChD,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,YAAW,kBAAMD,EAAQN,KAAOC,MCDzD,IAAMO,EAAWC,YAAU,CAChCC,UAAWC,YAAe,CAAEC,QAAS,MACrCC,UAAW,SAACC,GAAD,MAAc,CACvBC,aAAcD,EAAQE,MAAiB,CACrCC,QADqC,SAC7BC,EAAKC,EAAUC,EAAcV,GACnC,MAAO,CACLV,KDGDD,EAAmBsB,EAAQ,KCHPC,MAAK,SAAUC,GAChC,OAAOA,SAKfC,cAAeV,EAAQE,MAAiB,CACtCC,QADsC,SAC9BC,EAAKC,EAAUC,EAAcV,GACnC,MAAO,CACLV,KDVDD,EAAmBsB,EAAQ,KCUNC,MAAK,SAAUC,GAQjC,OAPoB,YACfA,EAASE,MAAK,SAACC,EAA2BC,GAG3C,OAFgB,IAAIC,KAAKF,EAAEG,WAAWC,UAAY,IAAIF,KAAKD,EAAEE,WAAWC,yBAazEC,EAAgDvB,EAAhDuB,qBAAsBC,EAA0BxB,EAA1BwB,sBC/BxBC,EAAQC,YAAe,CAClCC,QAAQ,eACL3B,EAAS4B,YAAc5B,EAAS2B,SAGnCE,WAAY,SAACC,GAAD,OACVA,IAAuBC,OAAO/B,EAAS6B,e,gGC+C5BG,MA1Cf,YAA0E,IAAnDC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,OAC9B,EAAwCC,oBAAkB,GAA1D,mBAAOC,EAAP,KAAqBC,EAArB,KAcA,OACE,cAACC,EAAA,EAAD,CAASC,MAAOL,EAAOM,MAAOC,KAAML,EAApC,SACE,gCACE,eAACM,EAAA,EAAD,CACEC,WAAW,aACXC,aAbR,WACEP,GAAgB,IAaVQ,aAVR,WACER,GAAgB,IAMZ,UAKE,cAACS,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,IAAI,SAASC,IAAKf,EAAOgB,WAEnC,cAACC,EAAA,EAAD,CACEC,QAASnB,EAAQA,QACjBoB,UACE,eAAC,IAAMC,SAAP,WAzBHpB,EAAOqB,UAAY,IAAMrB,EAAOsB,SAAW,IA2BrCC,IAAMxB,EAAQZ,WAAWqC,OAAO,sCAKzC,cAACC,EAAA,EAAD,CAASC,QAAQ,QAAQC,UAAU,SAnB3B5B,EAAQ6B,OCzBlBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OACPC,SAAU,QACVC,gBAAiBJ,EAAMK,QAAQC,WAAWC,OAE5CC,OAAQ,CACNC,QAAS,cA+BEC,MA3Bf,WACE,IAAMC,EAAUb,IACFc,EAAetD,IAArB/B,KACAA,EAASgC,IAAThC,KAMR,OACE,8BACGA,GAAQqF,GACP,cAACC,EAAA,EAAD,CAAMC,UAAWH,EAAQV,KAAzB,SACG1E,EAAKwF,KAAI,SAAC/C,GAAD,OACR,8BACE,cAAC,EAAD,CACEA,QAASA,EACTC,QAZK+C,EAYahD,EAAQiD,OAX/BL,EAAWM,MAAK,SAACjD,GAAD,OAA4BA,EAAO4B,KAAOmB,SAQ/ChD,EAAQ6B,IAT5B,IAAmBmB,UChBNG,MAJf,WACE,OAAO,cAAC,EAAD,KCGTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU9D,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ+D,SAASC,eAAe,W","file":"static/js/main.e572e792.chunk.js","sourcesContent":["// DO NOT MODIFY\n\nfunction randomDelayPromise(data) {\n  const delay = Math.floor(Math.random() * 400) + 100;\n  return new Promise(resolve => setTimeout(() => resolve(data), delay));\n}\n\nexport function getMessages() {\n  return randomDelayPromise(require('./messages.json'));\n}\n\nexport function getMembers() {\n  return randomDelayPromise(require('./members.json'));\n}\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { getMembers, getMessages } from \"./data\";\n\nexport const reduxApi = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: \"/\" }),\n  endpoints: (builder) => ({\n    fetchMembers: builder.query<any, void>({\n      queryFn(arg, queryApi, extraOptions, baseQuery) {\n        return {\n          data: getMembers().then(function (response: any) {\n            return response;\n          }),\n        };\n      },\n    }),\n    fetchMessages: builder.query<any, void>({\n      queryFn(arg, queryApi, extraOptions, baseQuery) {\n        return {\n          data: getMessages().then(function (response: any) {\n            const sortedMessages = [\n              ...response.sort((a: { timestamp: string; }, b: { timestamp: string; }) => {\n                const newDate = new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();\n\n                return newDate;\n              }),\n            ];\n            return sortedMessages;\n          }),\n        };\n      },\n    }),\n  }),\n});\n\nexport const { useFetchMembersQuery, useFetchMessagesQuery } = reduxApi;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reduxApi } from \"./reduxApi\";\n\nexport const store = configureStore({\n  reducer: {\n    [reduxApi.reducerPath]: reduxApi.reducer,\n  },\n\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(reduxApi.middleware),\n});\n","import React, { useState } from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport dayjs from \"dayjs\";\n\ninterface MessageItemProps {\n  message: any;\n  member: any;\n}\n\nfunction MessageItem({ message, member }: MessageItemProps): JSX.Element {\n  const [emailDisplay, setEmailDisplay] = useState<boolean>(false);\n\n  function getMemberName() {\n    return member.firstName + \" \" + member.lastName + \" \";\n  }\n\n  function messageOnMouseEnter() {\n    setEmailDisplay(true);\n  }\n\n  function messageOnMouseLeave() {\n    setEmailDisplay(false);\n  }\n\n  return (\n    <Tooltip title={member.email} open={emailDisplay}>\n      <div key={message.id}>\n        <ListItem\n          alignItems=\"flex-start\"\n          onMouseEnter={messageOnMouseEnter}\n          onMouseLeave={messageOnMouseLeave}\n        >\n          <ListItemAvatar>\n            <Avatar alt=\"Avatar\" src={member.avatar} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={message.message}\n            secondary={\n              <React.Fragment>\n                {getMemberName()}\n                {dayjs(message.timestamp).format(\"- ddd DD MMM YYYY HH:mm:ss\")}\n              </React.Fragment>\n            }\n          />\n        </ListItem>\n        <Divider variant=\"inset\" component=\"li\" />\n      </div>\n    </Tooltip>\n  );\n}\n\nexport default MessageItem;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport { useFetchMembersQuery, useFetchMessagesQuery } from \"../reduxApi\";\nimport MessageItem from \"./messageItem\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: \"200ch\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: \"inline\",\n  },\n}));\n\nfunction Messages() {\n  const classes = useStyles();\n  const { data: memberData } = useFetchMembersQuery();\n  const { data } = useFetchMessagesQuery();\n\n  function getMember(memberId: string) {\n    return memberData.find((member: { id: string }) => member.id === memberId);\n  }\n\n  return (\n    <div>\n      {data && memberData && (\n        <List className={classes.root}>\n          {data.map((message: any) => (\n            <div key={message.id}>\n              <MessageItem\n                message={message}\n                member={getMember(message.userId)}\n              />\n            </div>\n          ))}\n        </List>\n      )}\n    </div>\n  );\n}\n\nexport default Messages;\n","import Messages from \"./components/messages\";\n\nfunction App() {\n  return <Messages />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}